<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://mybatis.org/schema/mybatis-spring 
       http://mybatis.org/schema/mybatis-spring-1.2.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
<!--该包下的类支持注解，扫描该包下mapper接口类及mapper对 应的xml文件，实现动态代理，由spring容器负责管理bean -->
<mybatis:scan base-package="com.as.ssm.dao"/>

<!-- 正常情况下，Spring的配置文件扫描service层和dao层，springmvc扫描controller 实现事务,否则事物不生效 -->
<context:component-scan base-package="com.as.ssm">
<!-- 扫描service层 -->
  <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
<!--不扫描controller层 -->
  <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>

	<!--引入属性文件 配置数据库相关参数properties的属性-->
	<context:property-placeholder
		location="classpath:configuration.properties" />

	<!--数据库连接及连接池 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize">
			<value>1</value>
		</property>
		<property name="maxActive">
			<value>5</value>
		</property>
		<property name="minIdle">
			<value>1</value>
		</property>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait">
			<value>60000</value>
		</property>
		<!-- 配置监控统计拦截的filters -->
		<property name="filters">
			<value>stat</value>
		</property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>60000</value>
		</property>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis">
			<value>300000</value>
		</property>
	</bean>

	<!-- mybatis配置：MyBatis的session工厂 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 给映射的类配置别名 -->
		<!-- 默认的别名是类的首字母小写 Users 对应users -->
		<property name="typeAliasesPackage" value="com.as.ssm.domain" />
		<!-- 自动扫描mapping.xml文件 -->
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>

		<!--		 配置log4j-->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>


	</bean>

<!-- 配置事务管理器 -->
	<bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 启用事务注解 配置基于注解的声明式事务-->
	<tx:annotation-driven transaction-manager="transactionManager"/>

<!--  	代表使用注解实现AOP，添加AOP注解的处理器--> 
 	<aop:aspectj-autoproxy/>
   <!--    原生的方式实现AOP也就是xml方式配置 
   <bean id="myAspect2" class="com.as.aop.MyAspect2"></bean>
   
   <aop:config>
   <aop:aspect ref="myAspect2">
   <aop:pointcut id="my2pointcut" expression="execution(* com.as.service.*.*(..))"/>
   <aop:before method="beforeTest" pointcut-ref="my2pointcut"/>
   <aop:after method="afterTest" pointcut-ref="my2pointcut"/>
   <aop:around method="roundTest" pointcut-ref="my2pointcut"/>
   <aop:after-returning method="afterReturning" pointcut-ref="my2pointcut"/>
   <aop:after-throwing method="afterThrowing" pointcut-ref="my2pointcut"/>
   </aop:aspect>
   </aop:config> -->	

</beans>
